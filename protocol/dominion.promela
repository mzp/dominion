#define BUF_SIZE 3
#define CLIENT_NUM 2
#define CARD_NUM 20

#define MsgType byte
#define TurnStart   0
#define TurnEnd     1
#define KEEP        2
#define NEXT        3
#define EventNotify 4
#define EventSend   5
#define Error       6
#define Reject     7


#define INC(X) X = X + 1
#define RESET(X) X = 0

#define ErrorMax 2

mtype = { Connect, Chat, Start, Action, Buy, NextPhase };
chan server = [BUF_SIZE] of { mtype, chan, int };

bool Go = false;

inline sendError(ch)
{
  printf("error\n");
  ch ! Error
}

proctype Oneshot(chan client; MsgType value){
  if
    :: (Go == true) -> client ! value;
  fi
}

inline error(ch){
  printf("ERROR\n");
  ch ! Error;
}

bool fireChat = false;
proctype chatEvent(chan client) {
  bool prev = fireChat;
  bool b;
  do
    :: client ? EventSend ->
       fireChat = !fireChat;
    :: prev != fireChat ->
       prev = fireChat;
       b = full(client);
       if
	 :: b ->
	    skip
	 :: else ->
	    client ! EventNotify
       fi
  od
}

inline rejectHandle(){
  INC(errorCount);
  if
    :: (errorCount >= ErrorMax) ->
       rejects[id] = true;
       printf("reject[%d]\n",id);
       ch ! Reject;
       if
	 :: id == turn ->
	    goto clean;
       fi
    :: else ->
       sendError(ch);
  fi
}

chan clients[CLIENT_NUM];
bool rejects[CLIENT_NUM];

proctype Server()
{
  int user = 0;
  int wait = 0;
  chan ch;

  /* initial state */
  do
    :: server ? Connect(ch, _) ->
       ch ! user;
       clients[user] = ch;
       user = user + 1;
    :: server ? Start(ch, _) ->
       wait = wait + 1;
       run Oneshot(ch, 0);
    :: (wait == user) && (user == CLIENT_NUM) ->
       Go = true;
       goto game_start;
    :: server ? Chat(ch, _) ->
       run chatEvent(ch);
  od;

  int turn = 0;
  int count = 0;
  int errorCount = 0;
  int id = 0;

game_start:
  printf("game start[%d]\n",turn);

action:
  printf("===== change turn[%d] =====\n",turn);
  clients[turn] ! TurnStart;
  RESET(count);
  RESET(errorCount);
  printf("= action phase[%d] =\n",turn);
  do
    :: server ? Action(ch,id) ->
       atomic {
	 if
	   ::(id == turn) ->
	      printf("action[%d]\n", turn);
	      if
		::(count == 100) -> ch ! NEXT; goto buy;
		:: ch ! KEEP; INC(count);
		:: ch ! NEXT; goto buy
	      fi
	   :: else ->
	      rejectHandle();
	 fi
       }
    :: server ? NextPhase(ch, id) ->
       atomic {
	 if
	   ::(id == turn) ->
	      ch ! NEXT;
	      goto buy;
	   :: else ->
	      rejectHandle();
	 fi
       }
    :: server ? Chat(ch, _) ->
       atomic {
	 run chatEvent(ch);
       }
    :: server ? Buy(ch,id) ->
       atomic {
	 rejectHandle();
       }
  od;

buy:
  printf("= buy phase[%d] =\n",turn);
  count = 0;
  do
    :: server ? Buy(ch,id) ->
       atomic {
	 if
	   ::(id == turn) ->
	      printf("buy[%d]\n", turn);
	      if
		:: (count == 100) -> ch ! NEXT; goto clean;
		:: ch ! KEEP; INC(count);
		:: ch ! NEXT; goto clean;
	      fi
	   :: else ->
	      rejectHandle();
	 fi
       }
    :: server ? NextPhase(ch, id) ->
       atomic {
	 if
	   ::(id == turn) ->
	      ch ! NEXT;
	      goto clean;
	   :: else ->
	      rejectHandle();
	 fi
       }
    :: server ? Action(ch,id) ->
       atomic{
	 rejectHandle();
       }
  od;

clean:
  printf("= clean phase[%d] =\n", turn);
  turn = (turn + 1) % user;
  do
    :: (rejects[turn] == true) ->
       atomic{
	 printf("%d\n",turn);
	 turn = (turn + 1) % user;
       }
    :: else ->
       break
  od;
  goto action;
finish:
  printf("%d win", turn);
}

proctype ChatRecv(pid my_pid; chan ch){
  do
    :: ch ? EventNotify ->
       printf("event[%d]\n", my_pid);
  od
}

proctype User() {
  chan me = [BUF_SIZE] of { MsgType };
  chan chat = [BUF_SIZE] of { MsgType };
  int id;

  run ChatRecv(_pid, chat);

  server ! Connect(me,0);
  if
    :: me ? id ->
       printf("my id: %d\n",id);
       server ! Start(me, id);
       server ! Chat(chat, id);

       if
	 :: me ? TurnStart ->
progress:
action:
	    printf("event ->\n");
	    chat ! EventSend;
	    if
	      :: me ? _ ->
		 /* action */
		 server ! Action(me, id);
		 do
		   :: me ? KEEP ->
		      if
			:: server ! Action(me, id)
			:: server ! NextPhase(me, id)
		      fi
		   :: me ? NEXT ->
		      /* buy */
		      server ! Buy(me, id);
		      do
			:: me ? KEEP ->
			   if
			     :: server ! Buy(me, id)
			     :: server ! NextPhase(me,id)
			   fi
			:: me ? NEXT ->
			   goto action;
		      od
		 od
	    fi
       fi
  fi
}

inline gorilla(me, id){
  if
    :: printf("gorilla action\n"); server ! Action(me, id)
    :: printf("gorilla buy\n");    server ! Buy(me, id)
    :: printf("gorilla next\n");   server ! NextPhase(me, id)
  fi
}

proctype Gorilla(){
  chan me = [BUF_SIZE] of { MsgType };
  chan chat = [BUF_SIZE] of { MsgType };
  int id;
  MsgType m;
  server ! Connect(me,0);
  if
    :: me ? id ->
       printf("my id: %d\n",id);
       server ! Start(me, id);
       do
	 ::
	    if
	      :: me ? Reject ->
		 goto reject;
	      :: len(me) > 0 ->
		 do
		   :: len(me) > 0 ->
		      if
			:: me ? m ->
			   if :: (m == Reject) -> goto reject;
			      :: else -> skip
			   fi
		      fi
		   :: len(me) == 0 -> break
		 od;
	    fi;
	    gorilla(me, id)
       od
  fi;
reject:
  printf("reject\n");
  do
    :: me ? _ -> printf("recv after reject\n");
  od
}

init {
  run Server();
  run Gorilla();
  run User();
}