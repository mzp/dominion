#define BUF_SIZE 10
#define CLIENT_NUM 2
#define CARD_NUM 20

#define KEEP 1
#define NEXT 2

mtype = { Connect, Start, Pass, Action, Buy, Cleanup, NextPhase };
chan server = [BUF_SIZE] of { mtype, chan, int };

bool Go = false;

proctype Oneshot(chan client; int value){
  if
    :: (Go == true) -> client ! value;
  fi
}


proctype Server()
{
  int user = 0;
  int wait = 0;
  chan ch;
  chan clients[CLIENT_NUM];
  byte cards[CARD_NUM];

  /* initial state */
  do
    :: server ? Connect(ch, _) ->
       ch ! user;
       clients[user] = ch;
       user = user + 1;
    :: server ? Start(ch, _) ->
       wait = wait + 1;
       run Oneshot(ch, 0);
    :: (wait == user) && (user == 2) ->
       Go = true;
       goto game_start;
  od;

  int turn = 0;
  int id = 0;

game_start:
  printf("game start[%d]\n",turn);

action:
  clients[turn] ! turn;
  do
    :: server ? Action(ch,id) ->
       if
	 ::(id == turn) ->
	    printf("action[%d]\n", turn);
	    if
	      :: ch ! KEEP;
	      :: ch ! NEXT; goto buy
	    fi
	 :: else ->
	    skip;
       fi;
  od;

buy:
  do
    :: server ? Buy(ch,id) ->
       if
	 ::(id == turn) ->
	    printf("buy[%d]\n", turn);
	    if
	      :: ch ! KEEP;
	      :: ch ! NEXT; goto clean;
	    fi
	 :: else ->
	    skip;
       fi;
  od;

clean:
  printf("clean[%d]\n", turn);
  do
    :: server ? Cleanup(ch,id) ->
       if
	 ::(id == turn) ->
	    clients[turn] ! NEXT;
	    turn = (turn + 1) % user;
	    goto action;
	 :: else ->
	    skip;
       fi;
  od;

finish:
  printf("%d win", turn);
}

proctype User() {
  chan me = [BUF_SIZE] of { int };
  int id;

  server ! Connect(me,0);
  if
    :: me ? id ->
       printf("my id: %d\n",id);
       server ! Start(me, id);
       if
	 :: me ? _ ->
action:
	    if
	      :: me ? _ ->
		 /* action */
		 server ! Action(me, id);
		 do
		   :: me ? KEEP ->
		      server ! Action(me, id);
		   :: me ? NEXT ->
		      /* buy */
		      server ! Buy(me, id);
		      do
			:: me ? KEEP ->
			   server ! Buy(me, id);
			:: me ? NEXT ->
			   /* cleanup */
			   server ! Cleanup(me, id);
			   if
			     :: me ? _ ->
				goto action;
			   fi
		      od
		 od
	    fi
       fi
  fi
}

init {
  run Server();
  run User();
  run User();
/*  run User(); */
}